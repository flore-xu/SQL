
---------------------------------------------
-- table: orders
---------------------------------------------


-- 1. calculate total purchase amount of all orders. Return total purchase amount.
SELECT SUM(purch_amt) AS total_purchase_amount
FROM orders;


-- 2. calculate the average purchase amount of all orders. Return average purchase amount. 
SELECT AVG(purch_amt) AS average_purchase_amount
FROM orders;

-- 3. counts the number of unique salespeople. Return number of salespeople.
SELECT COUNT(DISTINCT salesman_id) AS number_of_salespeople
FROM orders;

-- 6. find the maximum purchase amount. 
SELECT MAX(purch_amt) AS maximum_purchase_amount
FROM orders;

-- 7. find the minimum purchase amount.
SELECT MIN(purch_amt) AS minimum_purchase_amount
FROM orders;


-- 9. find the highest purchase amount ordered by each customer. Return customer ID, maximum purchase amount. 
SELECT customer_id, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
GROUP BY customer_id;

-- 10. find the highest purchase amount ordered by each customer on a particular date. 
-- Return customer_id, order date and highest purchase amount.
SELECT customer_id, ord_date, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
GROUP BY customer_id, ord_date;

-- 11. determine the highest purchase amount made by each salesperson on '2012-08-17'. Return salesperson ID, purchase amount
SELECT salesman_id, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
WHERE ord_date = '2012-08-17'
GROUP BY salesman_id;


-- 12. find the highest order (purchase) amount by each customer on a particular order date. Filter the result by highest order (purchase) amount above 2000.00. Return customer id, order date and maximum purchase amount.
SELECT customer_id, ord_date, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
GROUP BY customer_id, ord_date
HAVING MAX(purch_amt) > 2000.00;


-- 13. find the maximum order (purchase) amount in the range 2000 - 6000 (Begin and end values are included.) by combination of each customer and order date. Return customer id, order date and maximum purchase amount. 
SELECT customer_id, ord_date, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
GROUP BY customer_id, ord_date
HAVING MAX(purch_amt) BETWEEN 2000 AND 6000;


-- 14. find the maximum order (purchase) amount based on the combination of each customer and order date. Filter the rows for maximum order (purchase) amount is either 2000, 3000, 5760, 6000. Return customer id, order date and maximum purchase amount. 
SELECT customer_id, ord_date, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
GROUP BY customer_id, ord_date
HAVING MAX(purch_amt) IN (2000, 3000, 5760, 6000);

-- 15. determine the maximum order amount for each customer. The customer ID should be in the range 3002 and 3007(Begin and end values are included.). Return customer id and maximum purchase amount.
SELECT customer_id, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
WHERE customer_id BETWEEN 3002 AND 3007
GROUP BY customer_id;


-- 16. find the maximum order (purchase) amount for each customer. The customer ID should be in the range 3002 and 3007(Begin and end values are included.). Filter the rows for maximum order (purchase) amount is higher than 1000. Return customer id and maximum purchase amount. 
SELECT customer_id, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
WHERE customer_id BETWEEN 3002 AND 3007
GROUP BY customer_id
HAVING MAX(purch_amt) > 1000;

-- 17. determine the maximum order (purchase) amount generated by each salesperson. Filter the rows for the salesperson ID is in the range 5003 and 5008 (Begin and end values are included.). Return salesperson id and maximum purchase amount.
SELECT salesman_id, MAX(purch_amt) AS maximum_purchase_amount
FROM orders
WHERE salesman_id BETWEEN 5003 AND 5008
GROUP BY salesman_id;

-- 18. count all the orders generated on '2012-08-17'. Return number of orders.
SELECT COUNT(*) AS number_of_orders
FROM orders
WHERE ord_date = '2012-08-17';


-- 20. count the number of orders based on the combination of each order date and salesperson. Return order date, salesperson id.
SELECT ord_date, salesman_id, COUNT(*) AS number_of_orders
FROM orders
GROUP BY ord_date, salesman_id;


---------------------------------------------
-- table: customer
---------------------------------------------


-- 4. count the number of customers. Return number of customers. 
SELECT COUNT(customer_id) AS number_of_customers
FROM customer;


-- 5. determine the number of customers who received at least one grade for their activity.
SELECT COUNT(customer_id) AS number_of_customers
FROM customer
WHERE grade IS NOT NULL;

-- 8. find the highest grade of the customers in each city. Return city, maximum grade.
SELECT city, MAX(grade) AS maximum_grade
FROM customer
GROUP BY city;


---------------------------------------------
-- table: salesman
---------------------------------------------


-- 19. count the number of salespeople in a city. Return number of salespeople. 
SELECT COUNT(salesman_id) AS number_of_salespeople
FROM salesman
WHERE city = 'Paris';

---------------------------------------------
-- table: item_mast
---------------------------------------------




-- 21. calculate the average product price. Return average product price.
SELECT AVG(pro_price) AS average_product_price
FROM item_mast;


-- 22. count the number of products whose price are higher than or equal to 350. Return number of products. 
SELECT COUNT(pro_id) AS number_of_products
FROM item_mast
WHERE pro_price >= 350;


-- 23. compute the average price for unique companies. Return average price and company id. 
SELECT AVG(pro_price) AS average_price, pro_com AS Company_ID
FROM item_mast
GROUP BY pro_com;



---------------------------------------------
-- table: emp_department
---------------------------------------------


-- 24. compute the sum of the allotment amount of all departments. Return sum of the allotment amount.
SELECT SUM(dpt_allotment) AS sum_of_allotment_amount
FROM emp_department;


---------------------------------------------
-- table: emp_details
---------------------------------------------


-- 25. count the number of employees in each department. Return department code and number of employees. 
SELECT emp_dept AS department_code, COUNT(emp_idno) AS number_of_employees
FROM emp_details
GROUP BY emp_dept;