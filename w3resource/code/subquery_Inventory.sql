-- subquery on Inventory Database, Employee2 Database, Mast Database
-- https://www.w3resource.com/sql-exercises/subqueries/index.php



-- 1. find all the orders issued by the salesman 'Paul Adam'. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM orders
WHERE salesman_id = (SELECT salesman_id
                         FROM salesman
                         WHERE name = 'Paul Adam');


-- 2. find all orders generated by London-based salespeople. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM orders
WHERE salesman_id IN (SELECT salesman_id
                         FROM salesman
                         WHERE city = 'London');


-- 3. find all orders generated by the salespeople who may work for customers whose id is 3007. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM orders
WHERE salesman_id IN (SELECT salesman_id
                         FROM orders
                         WHERE customer_id = 3007);


-- 4. find the order values greater than the average order value of 10th October 2012. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM orders
WHERE purch_amt > (SELECT AVG(purch_amt)
                  FROM orders
                  WHERE ord_date = '2012-10-10');


-- 5. find all the orders generated in New York city. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM orders
WHERE salesman_id IN (SELECT salesman_id
                      FROM salesman
                      WHERE city = 'New York');


-- 6. determine the commission of the salespeople in Paris. 
-- Return commission.
SELECT commission
FROM salesman
WHERE salesman_id IN (SELECT salesman_id
                      FROM customer
                      WHERE city = 'Paris');


-- 7. display all the customers whose id is 2001 bellow the salesman ID of Mc Lyon.

SELECT customer_id, cust_name
FROM customer
WHERE customer_id = (SELECT salesman_id - 2001
                    FROM salesman
                    WHERE name = 'Mc Lyon');


-- 8. count the customers with grades above New York's average. 
-- Return grade and count.

SELECT grade, COUNT(*)
  FROM customer
  WHERE grade > (SELECT AVG(grade)
                   FROM customer
                   WHERE city = 'New York');


-- 9. find those salespeople who earned the maximum commission. 
-- Return ord_no, purch_amt, ord_date, and salesman_id. 

SELECT ord_no, purch_amt, ord_date, salesman_id 
FROM orders 
WHERE salesman_id IN(
      SELECT salesman_id 
      FROM salesman
      WHERE commission = (
          SELECT MAX(commission) 
          FROM salesman)
          );



-- 10. find the customers who placed orders on 17th August 2012. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.

SELECT b.*, a.cust_name
FROM orders b
  JOIN customer a ON a.customer_id=b.customer_id
WHERE b.ord_date='2012-08-17';



-- 11. find the name and numbers of all salesmen who had more than one customer.
-- Return salesman_id and name.

SELECT salesman_id, name
FROM salesman
WHERE salesman_id IN (SELECT salesman_id
                          FROM customer
                          GROUP BY salesman_id
                          HAVING COUNT(*) > 1);



-- 12.find orders which are higher than the average amount of the orders of each customer. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id. 

SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
  FROM orders a
  WHERE purch_amt > (SELECT AVG(purch_amt)
                       FROM orders b
                       WHERE b.customer_id = a.customer_id);


-- 13. find those orders that are equal or higher than the average amount of the orders. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
  FROM orders a
  WHERE purch_amt >= (SELECT AVG(purch_amt)
                        FROM orders b
                        WHERE b.customer_id = a.customer_id);


-- 14. find the sums of the amounts from the orders table, grouped by date, and eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date.

SELECT ord_date,
       SUM(purch_amt)
  FROM orders a
  GROUP BY ord_date
  HAVING SUM(purch_amt) > (SELECT MAX(purch_amt) + 1000
                             FROM orders b
                             WHERE a.ord_date = b.ord_date);


-- 15. extract the data from the customer table if and only if one or more of the customers in the customer table are located in London. 
-- if exists, the query will return all the rows from customer table
SELECT *
  FROM customer
  WHERE EXISTS (SELECT 1
                  FROM customer
                  WHERE city = 'London');


-- 16. find salespeople who deal with multiple customers. 
-- Return salesman_id, name, city and commission.

SELECT salesman_id, name, city, commission
  FROM salesman
  WHERE salesman_id IN (SELECT salesman_id
                          FROM customer
                          GROUP BY salesman_id
                          HAVING COUNT(*) > 1);



-- 17. find salespeople who deal with a single customer. 
-- Return salesman_id, name, city and commission. 
SELECT salesman_id, name, city, commission
  FROM salesman
  WHERE salesman_id IN (SELECT salesman_id
                          FROM customer
                          GROUP BY salesman_id
                          HAVING COUNT(*) = 1);


-- 18. find the salespeople who deal the customers with more than one order. 
-- Return salesman_id, name, city and commission.
SELECT salesman_id, name, city, commission
  FROM salesman
  WHERE salesman_id IN (SELECT salesman_id
                          FROM customer
                          WHERE customer_id IN (SELECT customer_id
                                                  FROM orders
                                                  GROUP BY customer_id
                                                  HAVING COUNT(*) > 1));


-- 19. 20. find the salespeople who deal with those customers who live in the same city. 
-- Return salesman_id, name, city and commission

SELECT salesman_id, name, city, commission
  FROM salesman s 
  WHERE city IN (SELECT city
                   FROM customer c 
                   WHERE s.salesman_id = c.salesman_id);

SELECT salesman_id, name, city, commission
  FROM salesman s 
  WHERE city = ANY(SELECT city
                      FROM customer c
                      WHERE s.salesman_id = c.salesman_id);



-- 21. find all those salespeople whose names appear alphabetically lower than the customerâ€™s name. 
-- Return salesman_id, name, city, commission.
SELECT salesman_id, name, city, commission
  FROM salesman a
  WHERE name < ANY(SELECT name
                  FROM customer b
                  WHERE b.salesman_id = a.salesman_id);


-- 22. find all those customers with a higher grade than all the customers alphabetically below the city of New York. 
-- Return customer_id, cust_name, city, grade, salesman_id.
SELECT salesman_id, name, city, commission
  FROM customer
  WHERE grade > ALL(SELECT grade
                    FROM customer
                    WHERE city < 'New York');


-- 23. find all those orders whose order amount exceeds at least one of the orders placed on September 10th 2012. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
  FROM orders
  WHERE purch_amt > ANY(SELECT purch_amt
                           FROM orders
                           WHERE ord_date = '2012-09-10');


-- 24. find orders where the order amount is less than the order amount of a customer residing in London City. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id. 
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
  FROM orders
  WHERE purch_amt < ANY(SELECT purch_amt
                           FROM orders
                           WHERE customer_id IN (SELECT customer_id
                                                   FROM customer
                                                   WHERE city = 'London'));



-- 25. display all orders with an amount smaller than the maximum amount for a customers in London.
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
  FROM orders
  WHERE purch_amt < (SELECT MAX(purch_amt)
                       FROM orders
                       WHERE customer_id IN (SELECT customer_id
                                              FROM customer
                                              WHERE city = 'London'));



-- 26. find those customers whose grades are higher than those living in New York City. 
-- Return customer_id, cust_name, city, grade and salesman_id.

SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
  FROM customer
  WHERE grade > ALL(SELECT grade
                       FROM customer 
                       WHERE city = 'New York');


-- 27. calculate the total order amount generated by a salesperson. Salespersons should be from the cities where the customers reside. 
-- Return salesperson name, city and total order amount.
WITH CTE AS (
  SELECT s.salesman_id, s.name, s.city
    FROM salesman s 
      JOIN customer c ON s.salesman_id = c.salesman_id AND s.city = c.city
)

SELECT CTE.name, CTE.city, SUM(orders.purch_amt) AS total_amt
FROM orders
    JOIN CTE ON orders.salesman_id = CTE.salesman_id
GROUP BY orders.salesman_id;


-- 28/29/30 find those customers whose grades are not the same as those who live in London City. 
-- Return customer_id, cust_name, city, grade and salesman_id.
SELECT customer_id, cust_name, city, grade, salesman_id
  FROM customer
  WHERE grade != ANY(SELECT grade
                        FROM customer 
                        WHERE city = 'London');



-- 31. calculate the average price of each manufacturer's product along with their name. 
-- Return Average Price and Company.

SELECT AVG(pro_price),
       com_name
  FROM item_mast
    JOIN company_mast ON item_mast.pro_com = company_mast.com_id
  GROUP BY com_name;


-- 32. calculate the average price of each manufacturer's product of 350 or more. 
-- Return Average Price and Company.
SELECT c.com_name,
       AVG(i.pro_price)
  FROM item_mast i
  INNER JOIN company_mast c ON i.pro_com=c.com_id
  GROUP BY c.com_name
  HAVING AVG(i.pro_price) >= 350;



-- 33. find the most expensive product of each company. 
-- Return Product Name, Price and Company.
WITH CTE AS(
  SELECT com_id, MAX(pro_price) AS max_price
    FROM item_mast
    GROUP BY com_id
)
SELECT c.com_name, i.pro_name, i.pro_price
  FROM item_mast i
    INNER JOIN company_mast c ON i.pro_com = c.com_id
    INNER JOIN CTE ON i.pro_com = CTE.com_id AND i.pro_price = CTE.max_price;



-- 34. find employees whose last name is Gabriel or Dosio. 
-- Return emp_idno, emp_fname, emp_lname and emp_dept.
SELECT emp_idno, emp_fname, emp_lname, emp_dept
  FROM emp_details
  WHERE emp_lname IN ('Gabriel', 'Dosio');


-- 35. find the employees who work in department 89 or 63. 
-- Return emp_idno, emp_fname, emp_lname and emp_dept.
SELECT emp_idno, emp_fname, emp_lname, emp_dept
  FROM emp_details
  WHERE emp_dept IN (89, 63);


-- 36. find those employees who work for the department where the departmental allotment amount is more than Rs. 50000. 
-- Return emp_fname and emp_lname.
SELECT emp_fname, emp_lname
  FROM emp_details
  WHERE emp_dept IN (SELECT dpt_code
                       FROM emp_department
                       WHERE dpt_allotment > 50000);


-- 37. find the departments whose sanction amount is higher than the average sanction amount for all departments. 
-- Return dpt_code, dpt_name and dpt_allotment.
SELECT dpt_code, dpt_name, dpt_allotment
  FROM emp_department
  WHERE dpt_allotment > (SELECT AVG(dpt_allotment)
                           FROM emp_department);


-- 38. Write a query in SQL to find the names of departments with more than two employees are working.

SELECT dpt_name
  FROM emp_department
  WHERE dpt_code IN (SELECT emp_dept
                       FROM emp_details
                       GROUP BY emp_dept
                       HAVING COUNT(*) > 2);


--  39. find the departments with the second lowest sanction amount. 
-- Return emp_fname and emp_lname.
SELECT emp_fname, emp_lname
  FROM emp_details
  WHERE emp_dept IN (SELECT dpt_code
                       FROM emp_department
                       ORDER BY dpt_allotment
                       LIMIT 1, 1);
